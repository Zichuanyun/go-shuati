/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class BSTIterator {
private:    
    std::stack<TreeNode*> nodeStack;
public:
    BSTIterator(TreeNode *root) {
        if (root != NULL) {
            nodeStack.push(root);
            TreeNode * iter = root;
            while (iter->left != NULL) {
                nodeStack.push(iter->left);
                iter = iter -> left;
            }
        }
    }

    /** @return whether we have a next smallest number */
    bool hasNext() {
        return !nodeStack.empty();
    }

    /** @return the next smallest number */
    int next() {
        TreeNode* node = nodeStack.top();
        nodeStack.pop();
        int val = node->val;
        node = node->right;
        while(node != NULL) {
            nodeStack.push(node);
            node = node->left;
        }
        return val;
    }
};

/**
 * Your BSTIterator will be called like this:
 * BSTIterator i = BSTIterator(root);
 * while (i.hasNext()) cout << i.next();
 */
