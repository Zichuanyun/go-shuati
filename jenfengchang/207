class Solution {
public:
    bool canFinish(int numCourses, vector<pair<int, int>>& prerequisites) {
        vector<vector<int>> out(numCourses);
        vector<int> in_degree(numCourses, 0);
        for (const auto& edge : prerequisites) {
            out[edge.first].push_back(edge.second);
            in_degree[edge.second]++;
        }
        queue<int> cur;
        for (int i = 0; i < numCourses; ++i) {
            if (in_degree[i] == 0) 
                cur.push(i);
        }
        int count = 0;
        while (!cur.empty()) {
            int tmp = cur.front();
            count++;
            cur.pop();
            for (auto &i : out[tmp]) {
                in_degree[i]--;
                if (in_degree[i] == 0) {
                    cur.push(i);
                }
            }
        }
        return count == numCourses;
    }
};
