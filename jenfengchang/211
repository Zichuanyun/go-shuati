struct TrieNode {
    bool endd = false;
    vector<TrieNode*> next;
    TrieNode() {
        next.resize(26, NULL);
    }
};
class WordDictionary {

    TrieNode* anchor;
public:

    /** Initialize your data structure here. */
    WordDictionary() {
        anchor = new TrieNode();
    }
    
    /** Adds a word into the data structure. */
    void addWord(string word) {
        TrieNode* cur = anchor;
        for (const char& c : word) {
            if (cur->next[c - 'a'] == nullptr) {
                cur->next[c - 'a'] = new TrieNode();
            }
            cur = cur->next[c - 'a'];
        }
        cur->endd = true;
    }
    
    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */
    bool search(string word) {
        TrieNode* cur = anchor;
        return search(word, 0, cur);
    }
    bool search(string word, int idx, TrieNode* cur) {
        if (cur == NULL)
            return false;
        if (idx == word.size()) {
            return cur != NULL && cur->endd;
        }
        if (word[idx] != '.') {
            return search(word, idx + 1, cur->next[word[idx] - 'a']);
        } else {
            for(int i = 0; i < 26; ++i) {
                if(search(word, idx + 1, cur->next[i]))
                    return true;
            }
        }
        return false;
    }
};

/**
 * Your WordDictionary object will be instantiated and called as such:
 * WordDictionary obj = new WordDictionary();
 * obj.addWord(word);
 * bool param_2 = obj.search(word);
 */
