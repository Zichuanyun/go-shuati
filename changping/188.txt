class Solution {
public:
    int maxProfit(int k, vector<int>& prices) {
        if (prices.size() <= 0) {
            return 0;
        }
        if (k >= prices.size()/2) return quicksolver(prices);
        vector<vector<int>> res(k+1, vector<int>(prices.size(), 0));
        for(int i = 1; i <=k; i++){
            int tmpMax = -prices[0];
            for(int j = 1; j < prices.size(); j++) {
                res[i][j] = max(res[i][j-1], prices[j] + tmpMax);
                tmpMax = max(tmpMax, res[i-1][j-1] - prices[j]);
            }
        }
        return res[k][prices.size()-1];
    }
    int quicksolver(vector<int>& prices) {
        int res = 0;
        for (int i = 1; i < prices.size(); i++) {
            if(prices[i] > prices[i-1]) {
                res += prices[i] - prices[i-1];
            }
        }
        return res;
    }
};