/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* sortList(ListNode* head) {
        if(head == NULL || head->next == NULL) {
            return head;
        }
        ListNode* slow = head, *fast = head, *prev = NULL;
        
        while(slow != NULL && fast != NULL && fast->next != NULL){
            prev = slow;
            slow = slow->next;
            fast = fast->next->next;
        }
        prev->next = NULL;
        
        ListNode* first = sortList(head);
        ListNode* second = sortList(slow);
        
        return merge(first, second);
    }
    
    ListNode* merge(ListNode* l1, ListNode* l2) {
        ListNode* cur = new ListNode(0);
        ListNode* p = cur;
        while(l1 != NULL && l2 != NULL){
            if(l1->val < l2->val) {
                p->next = l1;
                l1 = l1->next;
            }else {
                p->next = l2;
                l2 = l2->next;
            }
            p = p->next;
        }
        if(l1 != NULL) {
            p->next = l1;
        }
        if(l2 != NULL) {
            p->next = l2;
        }
        return cur->next;
    }
};