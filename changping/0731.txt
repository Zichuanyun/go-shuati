
426. Convert Binary Search Tree to Sorted Doubly Linked List

/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;

    Node() {}

    Node(int _val, Node* _left, Node* _right) {
        val = _val;
        left = _left;
        right = _right;
    }
};
*/
class Solution {
private: 
    void inorder(Node* n, Node*& prev, Node*& head) {
        // First node
        if(!head && !n->left) {
            head = n;
            prev = n;
        }
        Node *left = n->left;
        Node *right = n->right;
        
        //left
        if(left) inorder(left, prev, head);
        // cur
        prev->right = n;
        n->left = prev;
        //right
        prev = n;
        if(right) inorder(right, prev, head);
    }
public:
    Node* treeToDoublyList(Node* root) {
        if (!root) return NULL;
        Node* prev = NULL;
        Node* head = NULL;
        inorder(root, prev, head);
        prev->right = head;
        head->left = prev;
        return head;
        
    }
};



865. Smallest Subtree with all the Deepest Nodes

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int depth(TreeNode *root) {
        return !root ? 0 : max(depth(root->left), depth(root->right)) + 1;
    }
    
    TreeNode* subtreeWithAllDeepest(TreeNode* root) {
        int d = depth(root->left) - depth(root->right);
        return !d ? root : subtreeWithAllDeepest(d > 0 ? root->left : root->right);
    }
    
}
};
