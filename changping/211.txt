class TrieNode {
public:
    bool exist;
    TrieNode* children[26];
    TrieNode() {
        exist = false;
        memset(children, NULL, sizeof(TrieNode*) * 26);
    }
};


class WordDictionary {
public:
    /** Initialize your data structure here. */
    WordDictionary() {
        root = new TrieNode();
    }
    
    /** Adds a word into the data structure. */
    void addWord(string word) {
        TrieNode* cur = root;
        for(auto c : word) {
            if(!cur->children[c - 'a']) {
                cur->children[c - 'a'] = new TrieNode();
            }
            cur = cur->children[c - 'a'];
        }
        cur->exist = true;
    }
    
    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */
    bool search(string word) {
        return query(word.c_str(), root);
    }

private:
    TrieNode* root;
    bool query(const char* word, TrieNode* tmp) {
        TrieNode *cur = tmp;
        for(int i = 0; word[i]; i++){
            if(cur && word[i] != '.') {
                cur = cur->children[word[i] - 'a'];
            }
            else if (cur && word[i] == '.'){
                TrieNode *curtmp = cur;
                for (int j = 0; j < 26; j++) {
                    cur = curtmp->children[j];
                    if(query(word + i + 1, cur))
                        return true;
                }
            }
            else
                break;
        }
        return cur && cur->exist;
    }
};

/**
 * Your WordDictionary object will be instantiated and called as such:
 * WordDictionary obj = new WordDictionary();
 * obj.addWord(word);
 * bool param_2 = obj.search(word);
 */
