98. Validate Binary Search Tree
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

class Solution {
public:
    bool isValidBST(TreeNode* root) {
        TreeNode *prev = NULL;
        return helper(root, prev);
        
    }
    bool helper(TreeNode* cur, TreeNode* &prev) {
        if(cur == NULL) return true;
        if(!helper(cur->left, prev)) return false;
        if(prev != NULL && prev->val >= cur->val) return false;
        prev = cur;
        return helper(cur->right, prev);
    }
};


57. Insert Interval
/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    vector<Interval> insert(vector<Interval>& intervals, Interval newInterval) {
        
        vector<Interval> result;
        if(intervals.size() == 0) {
            result.push_back(newInterval);
            return result;
        }
        int i = 0;
        while( i < intervals.size() && newInterval.start > intervals[i].end) {
            result.push_back(intervals[i]);
            i++;
        }
        int min_val = 0;
        if(i < intervals.size())
            min_val = min(newInterval.start, intervals[i].start);
        else
            min_val = newInterval.start;
        
        int max_val = newInterval.end;
        while( i < intervals.size() && newInterval.end >= intervals[i].start) {
            max_val = max(newInterval.end, intervals[i].end);
            i++;
        }
        
        struct Interval mergedInterval(min_val, max_val);
        result.push_back(mergedInterval);
        
        while ( i < intervals.size()) {
            result.push_back(intervals[i]);
            i++;
        }
        return result;
        
    }
};

277. Find the Celebrity
// Forward declaration of the knows API.
bool knows(int a, int b);

class Solution {
public:
    int findCelebrity(int n) {
        if(n <= 1) {
            return n-1;
        }
        int candidate = 0;
        for(int i = 1; i < n; i++) {
            if(!knows(i, candidate)) {
                candidate = i;
            }
        }
        for(int i = 0; i < n; i++) {
            if( i == candidate )
                continue;
            if(!knows(i, candidate) || knows(candidate,i)) return -1;
        }
        return candidate;
    }
};
