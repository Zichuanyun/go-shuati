class TrieNode {
public:
    bool is_end ;
    vector<TrieNode*> children;
    TrieNode(){
        is_end = false;
        children = vector<TrieNode*>(26, NULL);
    }
};

class Trie {
public:
    TrieNode* getRoot() {return root;}
    Trie(vector<string>& words) {
        root = new TrieNode();
        for(int i = 0; i < words.size(); i++) {
            addWord(words[i]);
        }
    }
    void addWord(const string& word) {
        TrieNode* cur = root;
        for(int i = 0; i < word.size(); i++) {
            int index = word[i] - 'a';
            if(cur->children[index] == NULL)
                cur->children[index] = new TrieNode();
            cur = cur->children[index];
        }
        cur->is_end = true;
    }
private:
    TrieNode* root;
     
};

class Solution {
public:
    vector<string> findWords(vector<vector<char>>& board, vector<string>& words) {
        Trie* trie = new Trie(words);
        TrieNode *root = trie->getRoot();
        set<string> res_set;
        for(int x = 0; x < board.size(); x++) {
            for(int y = 0; y < board[0].size(); y++) {
                findWord(board, x, y, root, "", res_set);
            }
        }
        vector<string> res;
        for(auto it:res_set) res.push_back(it);
        return res;
    }
private:
    void findWord(vector<vector<char>>& board, int x, int y, TrieNode*root, string word, set<string> &result) {
        if(x < 0 || x >= board.size() || y < 0 || y >= board[0].size() || board[x][y] == ' ' ) return;
        
        if(root->children[board[x][y] - 'a'] != NULL) {
            word += board[x][y];
            root = root->children[board[x][y] - 'a'];
            if(root->is_end) result.insert(word);
            char c = board[x][y];
            board[x][y] = ' ';
            findWord(board, x+1, y, root, word, result);
            findWord(board, x-1, y, root, word, result);
            findWord(board, x, y-1, root, word, result);
            findWord(board, x, y+1, root, word, result);
            board[x][y] = c;
        }
    }
};