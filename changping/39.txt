class Solution {
public:
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
	sort(candidates.begin(),candidates.end());
        vector<vector<int>> res;
        if(candidates.size() == 0) {
            return res;
        }
        vector<int> cur;
        helper(candidates, res, cur, target, 0);
        return res;
    }
    
    void helper(vector<int>& candidates, vector<vector<int>>& res, vector<int>& cur, int target, int begin){
        if(target == 0) {
            res.push_back(cur);
            return;
        } 
        for(int i = begin; i < candidates.size() && candidates[i] <= target; ++i) {
            cur.push_back(candidates[i]);
            helper(candidates, res, cur, target - candidates[i], i);
            cur.pop_back();
        }
    }
};