/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
class Solution {
    
    public int minMeetingRooms(Interval[] intervals) {
        //corner case
        if(intervals == null || intervals.length == 0) return 0;
        
        int[] starts = new int[intervals.length];
        int[] ends = new int[intervals.length];
        
        for(int i = 0; i < intervals.length; i++) {
            starts[i] = intervals[i].start;
            ends[i] = intervals[i].end;
        }
        
        Arrays.sort(starts);
        Arrays.sort(ends);
        
        int rooms = 0;
        int end_idx = 0;
        for(int i = 0; i < intervals.length; i++) {
            if(starts[i] < ends[end_idx]) {
                rooms++;
            } else {
                end_idx++;
            }
        }
        return rooms;
    }
    
    public int minMeetingRooms3(Interval[] intervals) {
        //corner case
        if(intervals == null || intervals.length == 0) return 0;
        TreeMap<Integer, Integer> map = new TreeMap<Integer, Integer>((a, b) -> a - b);
        for(Interval inter : intervals) {
            if(map.containsKey(inter.start)) {
                map.put(inter.start, map.get(inter.start) + 1);
            } else {
                map.put(inter.start, 1);
            }
            
            if(map.containsKey(inter.end)) {
                map.put(inter.end, map.get(inter.end) - 1);
            } else {
                map.put(inter.end, -1);
            }
        }
        int curRoom = 0;
        int maxRoom = 0;
        for(Map.Entry<Integer, Integer> pair : map.entrySet()) {
            curRoom += pair.getValue();
            maxRoom = Math.max(curRoom, maxRoom);
        }
        return maxRoom;
    }
    
    public int minMeetingRooms2(Interval[] intervals) {
        //corner case
        if(intervals == null || intervals.length == 0) return 0;
        Arrays.sort(intervals, new Comparator<Interval>() {
            public int compare(Interval a, Interval b) {
                return a.start - b.start;
            }
        });
        PriorityQueue<Interval> pq = new PriorityQueue<Interval>(intervals.length, new Comparator<Interval>() {
            public int compare(Interval a, Interval b) {
                return a.end - b.end;
            }
        });
        pq.offer(intervals[0]);
        for(int i = 1; i < intervals.length; i++) {
            Interval inter = pq.poll();
            if(inter.end <= intervals[i].start) {
                inter.end = intervals[i].end;
            } else {
                pq.offer(intervals[i]);
            }
            pq.offer(inter);
        }
        return pq.size();
    }
}
