class Solution {
    int count = 0;
    public int findTargetSumWays(int[] nums, int S) {
        int sum = 0;
        for (int num : nums) {
            sum += num;
        }
        if (((sum - S) % 2 != 0) || S > sum) {
            return 0;
        }
        return subsetSum(nums, (sum - S) / 2);
    }
    
    private void dfs(int[] nums, int target, int idx){
        if (idx == nums.length){
            if(target == 0) {
                count++;
            }
            return;
        } 
        dfs(nums, target - nums[idx], idx + 1);
        dfs(nums, target, idx + 1);
    }
    
    private int subsetSum(int[] nums, int target){
        int[] dp = new int[target + 1];
        dp[0] = 1; 
        for (int num : nums) {
            for (int i = target; i >= 0; i--){
                if (i - num >= 0) {
                    dp[i] += dp[i - num];
                }
            }
        }
        return dp[target];
    }
}
